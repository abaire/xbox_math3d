#include <boost/test/data/monomorphic.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/unit_test.hpp>

#include "xbox_math_matrix.h"

using namespace XboxMath;

BOOST_AUTO_TEST_SUITE(xbox_math_matrix_suite)

#define TOLERANCE 1e-5f

struct MatrixTestCaseData {
  matrix4_t input;
  matrix4_t expected;
};

std::ostream &operator<<(std::ostream &os, const MatrixTestCaseData &tc) {
  os << "Input matrix {" << std::endl;
  for (auto row : tc.input) {
    os << " " << row[0] << " " << row[1] << " " << row[2] << " " << row[3]
       << std::endl;
  }
  os << "}" << std::endl;

  os << "Expected matrix {" << std::endl;
  for (auto row : tc.expected) {
    os << " " << row[0] << " " << row[1] << " " << row[2] << " " << row[3]
       << std::endl;
  }
  os << "}" << std::endl;

  return os;
}

struct ScalarTestCaseData {
  matrix4_t input;
  float expected;
};

std::ostream &operator<<(std::ostream &os, const ScalarTestCaseData &tc) {
  os << "Input matrix {" << std::endl;
  for (auto row : tc.input) {
    os << " " << row[0] << " " << row[1] << " " << row[2] << " " << row[3]
       << std::endl;
  }
  os << "}" << std::endl;

  os << "Expected value " << tc.expected << std::endl;

  return os;
}

struct Matrix3x3ScalarTestCaseData {
  matrix3_t input;
  float expected;
};

std::ostream &operator<<(std::ostream &os,
                         const Matrix3x3ScalarTestCaseData &tc) {
  os << "Input matrix {" << std::endl;
  for (auto row : tc.input) {
    os << " " << row[0] << " " << row[1] << " " << row[2] << std::endl;
  }
  os << "}" << std::endl;

  os << "Expected value " << tc.expected << std::endl;

  return os;
}

#define VECTOR_TEST(v, x, y, z, w)                                    \
  BOOST_TEST((v)[0] == (x), boost::test_tools::tolerance(TOLERANCE)); \
  BOOST_TEST((v)[1] == (y), boost::test_tools::tolerance(TOLERANCE)); \
  BOOST_TEST((v)[2] == (z), boost::test_tools::tolerance(TOLERANCE)); \
  BOOST_TEST((v)[3] == (w), boost::test_tools::tolerance(TOLERANCE))

#define MATRIX_TEST(m, m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, \
                    m34, m41, m42, m43, m44)                                  \
  VECTOR_TEST((m)[0], m11, m12, m13, m14);                                    \
  VECTOR_TEST((m)[1], m21, m22, m23, m24);                                    \
  VECTOR_TEST((m)[2], m31, m32, m33, m34);                                    \
  VECTOR_TEST((m)[3], m41, m42, m43, m44)

#define MATRIX_MATRIX_TEST(m, e)                           \
  VECTOR_TEST((m)[0], e[0][0], e[0][1], e[0][2], e[0][3]); \
  VECTOR_TEST((m)[1], e[1][0], e[1][1], e[1][2], e[1][3]); \
  VECTOR_TEST((m)[2], e[2][0], e[2][1], e[2][2], e[2][3]); \
  VECTOR_TEST((m)[3], e[3][0], e[3][1], e[3][2], e[3][3])

#define VECTOR3_TEST(v, x, y, z)                                      \
  BOOST_TEST((v)[0] == (x), boost::test_tools::tolerance(TOLERANCE)); \
  BOOST_TEST((v)[1] == (y), boost::test_tools::tolerance(TOLERANCE)); \
  BOOST_TEST((v)[2] == (z), boost::test_tools::tolerance(TOLERANCE))

#define MATRIX3_TEST(m, m11, m12, m13, m21, m22, m23, m31, m32, m33) \
  VECTOR3_TEST((m)[0], m11, m12, m13);                               \
  VECTOR3_TEST((m)[1], m21, m22, m23);                               \
  VECTOR3_TEST((m)[2], m31, m32, m33)

BOOST_AUTO_TEST_CASE(matrix_identity_produces_identity_matrix) {
  matrix4_t test;

  MatrixSetIdentity(test);

  MATRIX_TEST(test, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
              1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f);
}

BOOST_AUTO_TEST_CASE(matrix_add_matrix) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  matrix4_t mat2{
      0.8474566404344737f,   0.8195603850635462f,  0.8646734780714075f,
      0.9600013265199839f,   0.2608105073877024f,  0.5825968184915961f,
      0.027140487343348507f, 0.3557219290589344f,  0.6858570908919961f,
      0.42139371892600175f,  0.22105798117221032f, 0.8790446036260353f,
      0.4298333884494392f,   0.8817767666153977f,  0.881249550648736f,
      0.6270929678277427f};

  matrix4_t result;
  MatrixAddMatrix(mat1, mat2, result);

  MATRIX_TEST(result, 1.3024297704344736f, 1.6228529450635463f,
              1.3118180580714074f, 1.938294306519984f, 0.3636690373877024f,
              0.728749198491596f, 0.9603374873433486f, 0.7738138290589345f,
              0.8890885908919961f, 0.8591011589260018f, 0.8937328511722104f,
              1.0932643336260353f, 0.9021145684494392f, 0.9179105266153977f,
              1.497668770648736f, 0.8818682878277427f);
}

BOOST_AUTO_TEST_CASE(matrix_add_matrix_inline) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  matrix4_t mat2{
      0.8474566404344737f,   0.8195603850635462f,  0.8646734780714075f,
      0.9600013265199839f,   0.2608105073877024f,  0.5825968184915961f,
      0.027140487343348507f, 0.3557219290589344f,  0.6858570908919961f,
      0.42139371892600175f,  0.22105798117221032f, 0.8790446036260353f,
      0.4298333884494392f,   0.8817767666153977f,  0.881249550648736f,
      0.6270929678277427f};

  MatrixAddMatrix(mat1, mat2);

  MATRIX_TEST(mat1, 1.3024297704344736f, 1.6228529450635463f,
              1.3118180580714074f, 1.938294306519984f, 0.3636690373877024f,
              0.728749198491596f, 0.9603374873433486f, 0.7738138290589345f,
              0.8890885908919961f, 0.8591011589260018f, 0.8937328511722104f,
              1.0932643336260353f, 0.9021145684494392f, 0.9179105266153977f,
              1.497668770648736f, 0.8818682878277427f);
}

BOOST_AUTO_TEST_CASE(scalar_mult_matrix) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  matrix4_t result;
  ScalarMultMatrix(mat1, 0.45f, result);

  MATRIX_TEST(result, 0.2047379085f, 0.36148165200000004f, 0.201215061f,
              0.440231841f, 0.0462863385f, 0.065768571f, 0.41993865f,
              0.188141355f, 0.09145417500000001f, 0.19696834800000002f,
              0.30270369150000004f, 0.09639887850000001f, 0.21252653100000002f,
              0.016260192f, 0.27738864900000004f, 0.11464889400000002f);
}

BOOST_AUTO_TEST_CASE(scalar_mult_matrix_inplace) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  ScalarMultMatrix(mat1, 0.45f);

  MATRIX_TEST(mat1, 0.2047379085f, 0.36148165200000004f, 0.201215061f,
              0.440231841f, 0.0462863385f, 0.065768571f, 0.41993865f,
              0.188141355f, 0.09145417500000001f, 0.19696834800000002f,
              0.30270369150000004f, 0.09639887850000001f, 0.21252653100000002f,
              0.016260192f, 0.27738864900000004f, 0.11464889400000002f);
}

BOOST_AUTO_TEST_CASE(matrix_mult_matrix) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  matrix4_t mat2{
      0.8474566404344737f,   0.8195603850635462f,  0.8646734780714075f,
      0.9600013265199839f,   0.2608105073877024f,  0.5825968184915961f,
      0.027140487343348507f, 0.3557219290589344f,  0.6858570908919961f,
      0.42139371892600175f,  0.22105798117221032f, 0.8790446036260353f,
      0.4298333884494392f,   0.8817767666153977f,  0.881249550648736f,
      0.6270929678277427f};

  matrix4_t result;
  MatrixMultMatrix(mat1, mat2, result);

  MATRIX_TEST(result, 1.3222574077287463f, 1.8919335815610834f,
              1.3761700774785295f, 1.7290642656957154f, 0.945035858366951f,
              0.9313537661075215f, 0.6676396335648419f, 1.2332382091597953f,
              0.8398262056072067f, 0.8939223943331316f, 0.5250896707441512f,
              1.0764515452321965f, 0.9419483185106581f, 0.8925245047714734f,
              0.7701347229895525f, 1.1678719305622087f);
}

BOOST_AUTO_TEST_CASE(matrix_mult_matrix_inline) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  matrix4_t mat2{
      0.8474566404344737f,   0.8195603850635462f,  0.8646734780714075f,
      0.9600013265199839f,   0.2608105073877024f,  0.5825968184915961f,
      0.027140487343348507f, 0.3557219290589344f,  0.6858570908919961f,
      0.42139371892600175f,  0.22105798117221032f, 0.8790446036260353f,
      0.4298333884494392f,   0.8817767666153977f,  0.881249550648736f,
      0.6270929678277427f};

  MatrixMultMatrix(mat1, mat2);

  MATRIX_TEST(mat1, 1.3222574077287463f, 1.8919335815610834f,
              1.3761700774785295f, 1.7290642656957154f, 0.945035858366951f,
              0.9313537661075215f, 0.6676396335648419f, 1.2332382091597953f,
              0.8398262056072067f, 0.8939223943331316f, 0.5250896707441512f,
              1.0764515452321965f, 0.9419483185106581f, 0.8925245047714734f,
              0.7701347229895525f, 1.1678719305622087f);
}

BOOST_AUTO_TEST_CASE(matrix_transpose) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  matrix4_t result;
  MatrixTranspose(mat1, result);

  MATRIX_TEST(result, 0.45497313f, 0.10285853f, 0.2032315f, 0.47228118f,
              0.80329256f, 0.14615238f, 0.43770744f, 0.03613376f, 0.44714458f,
              0.933197f, 0.67267487f, 0.61641922f, 0.97829298f, 0.4180919f,
              0.21421973f, 0.25477532f);
}

BOOST_AUTO_TEST_CASE(matrix_transpose_inplace) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  MatrixTranspose(mat1);

  MATRIX_TEST(mat1, 0.45497313f, 0.10285853f, 0.2032315f, 0.47228118f,
              0.80329256f, 0.14615238f, 0.43770744f, 0.03613376f, 0.44714458f,
              0.933197f, 0.67267487f, 0.61641922f, 0.97829298f, 0.4180919f,
              0.21421973f, 0.25477532f);
}

const std::vector<ScalarTestCaseData> kDeterminant4x4TestCases = {
    {{
         {-77.56058, -73.29622, 76.173386, -105.872795},
         {110.485985, -99.86871, 68.17986, -46.350075},
         {89.41808, -117.33162, 31.300903, -41.458233},
         {-57.152332, -119.33763, 118.93355, -109.06822},
     },
     -31237984.0},
    {{
         {25.119823, 60.166058, 125.247, -127.873665},
         {-82.704704, -67.87804, -101.99847, 93.87678},
         {-76.88716, -119.16837, -26.201239, 125.366234},
         {-93.98099, 59.92391, -120.28356, 39.780704},
     },
     72264480.0},
    {{
         {-11.253023, -114.905136, -58.515568, 9.54345},
         {95.699005, 65.94696, -62.204777, 99.95512},
         {-5.3088145, 78.78048, -21.55614, -76.0061},
         {-7.9264464, -56.354755, 108.296234, 36.739204},
     },
     47454544.0},
    {{
         {-118.64248, -40.743362, -2.0549002, -81.55372},
         {-9.156526, -29.757635, -1.1315216, -94.2337},
         {118.540634, -45.31264, -3.0061998, -117.13551},
         {-58.189594, -118.30655, 62.877636, -6.465866},
     },
     -20410566.0},
    {{
         {49.05382, 75.14898, -97.937675, 95.315926},
         {44.078777, 108.833534, 63.718575, -89.83216},
         {-63.898563, 35.434326, 116.510445, 117.88323},
         {-127.92125, 97.71369, 111.266914, 11.531281},
     },
     473266528.0},
    {{
         {0.5973135, 0.7884496, -0.38909483, -0.4272745},
         {0.2764215, -0.22838795, 0.6943301, 0.17584093},
         {0.6128294, 0.5430486, -0.199263, -0.36679295},
         {0.23178783, 0.8928905, -0.43102714, 0.631543},
     },
     0.059500157833099365},
    {{
         {-0.82755524, 0.005714185, -0.7141066, 0.6293117},
         {-0.6249478, -0.6203294, -0.0518985, -0.56802547},
         {0.9084496, -0.31985557, 0.1197805, -0.43035594},
         {-0.6091854, 0.52268946, 0.10379809, -0.51589227},
     },
     0.4476330876350403},
    {{
         {-0.76490736, 0.12803642, -0.3951315, 0.8886016},
         {0.94201434, -0.09644114, -0.18640919, 0.8037366},
         {-0.31807292, -0.21064603, -0.3766659, -0.24119881},
         {0.26226363, -0.10790095, 0.5173118, -0.363489},
     },
     0.1666465550661087},
    {{
         {-0.09288208, -0.6041256, -0.61792034, -0.4212828},
         {0.9417289, 0.08646435, 0.85217667, -0.46745127},
         {-0.6602507, 0.106033206, 0.6926822, 0.4886811},
         {0.52135915, 0.34852678, -0.13314699, 0.710213},
     },
     0.4838455617427826},
    {{
         {-0.20039481, -0.40436867, 0.15710211, -0.8463254},
         {0.10297943, 0.5337609, 0.32131833, -0.88324255},
         {0.7187539, 0.5074469, 0.26171795, -0.79298097},
         {-0.23793536, -0.8434309, -0.47499472, -0.0086461315},
     },
     0.16794785857200623},
};

BOOST_DATA_TEST_CASE(matrix_determinant,
                     boost::unit_test::data::make(kDeterminant4x4TestCases),
                     test_case) {
  float result;
  MatrixDeterminant(test_case.input, result);

  BOOST_TEST(result == test_case.expected,
             boost::test_tools::tolerance(TOLERANCE));
}

BOOST_AUTO_TEST_CASE(matrix_determinant_inplace) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  float result = MatrixDeterminant(mat1);

  BOOST_TEST(result == 0.13013199761385197f);
}

BOOST_AUTO_TEST_CASE(matrix_submatrix_00) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  matrix3_t result;
  MatrixSubmatrix(mat1, 0, 0, result);

  MATRIX3_TEST(result, 0.14615238f, 0.933197f, 0.4180919f, 0.43770744f,
               0.67267487f, 0.21421973f, 0.03613376f, 0.61641922f, 0.25477532f);
}

BOOST_AUTO_TEST_CASE(matrix_submatrix_23) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  matrix3_t result;
  MatrixSubmatrix(mat1, 2, 3, result);

  MATRIX3_TEST(result, 0.45497313f, 0.80329256f, 0.44714458f, 0.10285853f,
               0.14615238f, 0.933197f, 0.47228118f, 0.03613376f, 0.61641922f);
}

const std::vector<Matrix3x3ScalarTestCaseData> kDeterminant3x3TestCases = {
    {{
         {83.623344, -98.14323, -19.978247},
         {78.21247, 7.298479, -96.157005},
         {-30.642033, 49.429497, -31.967945},
     },
     -238314.015625},
    {{
         {-64.49054, 35.734768, -84.41832},
         {-72.060455, -97.2223, 2.4538796},
         {-70.09516, 4.981093, 123.8154},
     },
     1695382.875000},
    {{
         {-6.733682, -45.537285, -42.923622},
         {-88.21477, -75.10941, 35.497116},
         {42.919804, 43.227203, -16.96907},
     },
     25846.130859},
    {{
         {-90.27615, -65.83423, 127.30301},
         {-88.86311, -76.1724, -124.302734},
         {72.5717, 5.9061403, 22.442118},
     },
     1187550.500000},
    {{
         {-118.62768, 58.684193, -23.641445},
         {-59.35031, -44.114002, -96.61851},
         {2.1735547, 67.27418, 39.449356},
     },
     -347425.093750},
    {{
         {-0.025720323, -0.77055913, 0.79525876},
         {0.7542319, -0.59347546, 0.44719648},
         {0.64257574, -0.78349775, 0.38478512},
     },
     -0.167610},
    {{
         {0.36072508, -0.71711713, -0.40216136},
         {-0.6488914, -0.025013795, -0.97002804},
         {0.8461205, 0.8493866, 0.40137097},
     },
     0.908545},
    {{
         {0.31466335, -0.56255454, 0.8150539},
         {-0.067845695, -0.9456546, 0.64487094},
         {-0.06921012, -0.72594947, -0.907024},
     },
     0.463729},
    {{
         {-0.89870346, 0.82463974, 0.33353442},
         {-0.11279124, 0.5399579, -0.9807563},
         {0.40338352, 0.78415674, 0.97353256},
     },
     -1.501423},
    {{
         {-0.7806033, -0.44190028, 0.47936103},
         {-0.10609233, 0.37421694, 0.46578535},
         {0.7676138, 0.3244225, 0.2547696},
     },
     -0.280604},
};
BOOST_DATA_TEST_CASE(matrix_determinant_3x3,
                     boost::unit_test::data::make(kDeterminant3x3TestCases),
                     test_case) {
  float result = MatrixDeterminant(test_case.input);

  BOOST_TEST(result == test_case.expected,
             boost::test_tools::tolerance(TOLERANCE));
}

const std::vector<MatrixTestCaseData> kAdjointTestCases = {
    {{{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f},
      {0.10285853f, 0.14615238f, 0.933197f, 0.4180919f},
      {0.2032315f, 0.43770744f, 0.67267487f, 0.21421973f},
      {0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f}},
     {{0.011548182253112993f, -0.22536766927495697f, 0.029215612696405956f,
       0.30092526525783075f},
      {0.030307972205033964f, -0.14825812283280443f, 0.30164596991086323f,
       -0.12671193744555986f},
      {-0.0654648185838749f, 0.10815657095795653f, 0.08374205154482095f,
       0.003474381022085934f},
      {0.13268413233202908f, 0.17711387076165488f, -0.2995494116732589f,
       -0.0374935777011427f}}},
    {{
         {576.778748, -137.760132, 3827.388184, 0.05811},
         {-217.026123, -602.686096, -15947.450195, -0.242126},
         {241.543518, 105.399162, 63789.800781, 0.968503},
         {1652.033813, 1239.025391, 274167.21875, 5.162606},
     },
     {
         {-36764376.0, 9191088.0, 4503653.5, -4.4096646},
         {9992042.0, 35868136.0, 8367465.0, 10.917384},
         {-100715.125, 419646.6, -1678586.5, 335717.28},
         {14715124000.0, -33835405000.0, 85694270000.0, -22111793000.0},
     }},
    {{
         {-943.7671, -206.05771, 1679.4277, -1439.514},
         {1528.4337, -1169.6085, 1146.6178, -1661.0642},
         {-91.21991, -242.04993, 780.7452, -78.60469},
         {-2022.3102, -375.4151, -1778.2683, 647.6908},
     },
     {
         {-1416201100.0, 804084350.0, -838522100.0, -1187167400.0},
         {2082845600.0, -2485504300.0, -6640362000.0, -2551001600.0},
         {216458510.0, -786223300.0, 5046157000.0, -922848830.0},
         {-2620301000.0, -1088642600.0, 7387439600.0, 66831668.0},
     }},
    {{
         {-1250.3296, -1187.2618, -514.12787, -1538.0773},
         {1727.7758, 2005.0131, 1053.023, -612.10516},
         {-1875.4154, -731.29553, -375.6687, -1645.847},
         {-1706.6842, 374.83948, 1196.7701, -1714.952},
     },
     {
         {3720254200.0, 1011952700.0, -3459113700.0, -378020670.0},
         {-5853708000.0, 1379361800.0, 6663018000.0, -1636878100.0},
         {3610386700.0, -1145027800.0, -7005135400.0, 3893522700.0},
         {-2462282500.0, -1504636500.0, 10286233.0, 269352400.0},
     }},
    {{
         {-1605.3741, -605.4923, 1701.1099, -765.0323},
         {1522.2413, -522.58887, -1722.2179, 82.75892},
         {-713.2809, -696.0439, 802.0265, -75.98264},
         {1645.0426, 472.42807, 570.6368, -309.63162},
     },
     {
         {475877980.0, -290160740.0, -897343040.0, -1033140300.0},
         {-140732700.0, 1061479000.0, 2578845700.0, -1406870.4},
         {630322100.0, 812386700.0, -1772677800.0, -905242750.0},
         {3475221200.0, 1575173000.0, -4099722000.0, 156217170.0},
     }},
    {{
         {1984.7982, 1280.1791, 514.2499, 304.05542},
         {-1225.7802, -1615.3809, -1930.5908, 1572.0742},
         {1751.9065, 1981.3872, -1102.1486, 50.228203},
         {94.500435, 1127.4633, -1582.3992, -1435.0894},
     },
     {
         {-11257800000.0, -3042471000.0, 7889853000.0, -5441955300.0},
         {11093555000.0, 3781172500.0, -10253524000.0, 6133641700.0},
         {2296736500.0, 1987839200.0, -1352355200.0, 2616868400.0},
         {5441720300.0, 578405100.0, -6044857300.0, 5273051000.0},
     }},
    {{
         {-1006.7492, 1061.7637, -1559.9069, 368.69974},
         {1076.1489, 296.18262, 356.06595, -858.82465},
         {289.9047, 1980.2018, -939.993, 1332.0845},
         {-1291.1877, 407.47635, -1510.9922, 426.30713},
     },
     {
         {2610859500.0, -1219781900.0, -692304200.0, -2552137200.0},
         {-2496934700.0, 643857500.0, 290546850.0, 2548742100.0},
         {-2519005000.0, 1274589600.0, 513536640.0, 3141705200.0},
         {1366044900.0, 207763140.0, -554379260.0, -1016426600.0},
     }},
    {{
         {1218.4965, -1438.4117, -1824.3981, 1587.1683},
         {1106.6681, 1931.454, 926.62683, 1069.1724},
         {-1248.3969, -343.3061, 912.2775, -774.3189},
         {-1022.84717, -374.9454, -1063.9438, 368.31662},
     },
     {
         {200220600.0, -1063958100.0, -2808077600.0, -3677750300.0},
         {-3037872600.0, 710912500.0, -4176275200.0, 2247409400.0},
         {2081613800.0, 2122872600.0, 5991646000.0, -2536251400.0},
         {3476571400.0, 3901273900.0, 5258154500.0, 1944906400.0},
     }},
    {{
         {1199.7762, 1316.1973, 1764.5211, -1588.1757},
         {-1975.0345, -728.24457, 48.24706, 166.96207},
         {1852.5203, -1759.0237, 812.76776, 1131.7961},
         {672.94635, -534.1445, -1485.5413, -1017.5822},
     },
     {
         {-228873040.0, 7940293600.0, -2962200000.0, -1634647300.0},
         {2110318100.0, 10934449000.0, 7717468700.0, 7084129000.0},
         {-6624248000.0, -6048027600.0, -3955035100.0, 4947399000.0},
         {8411468000.0, 8340761600.0, -236125600.0, 10132815000.0},
     }},
    {{
         {1008.08777, -857.9964, 615.2436, -575.4361},
         {-1129.1938, -1222.7968, 541.2497, 339.30722},
         {1785.9529, -1920.5858, -1570.2924, 299.7162},
         {-1116.542, 1752.2391, -769.52106, -1435.3894},
     },
     {
         {-2810958600.0, 5938564000.0, -267246960.0, 2474887000.0},
         {2660455200.0, 5675774500.0, 2598035000.0, 817605570.0},
         {-4911189000.0, 229524140.0, 4809964000.0, 3027456300.0},
         {8067197400.0, 2186190300.0, 800760200.0, 6353483300.0},
     }},
    {{
         {1311.9352, 830.4099, 106.35175, -1467.2252},
         {1119.8148, 1111.3787, 1855.1069, -1235.0587},
         {-454.71115, 296.01175, 36.597126, -1675.2633},
         {-1589.256, -998.2469, 1160.5226, -901.0396},
     },
     {
         {5251810000.0, -1235669100.0, -4569678000.0, 1638052000.0},
         {-6899123000.0, 3435878700.0, 6228953000.0, -5056472000.0},
         {-809387260.0, 2029461900.0, -1414781400.0, 1166630700.0},
         {-2662208000.0, 986833200.0, -663157400.0, -1312582000.0},
     }},
    {{
         {-1930.2339, 693.6663, -1801.4246, -2005.5931},
         {1660.5358, 1455.8346, -1129.2582, -1671.7296},
         {819.0612, -983.5137, -1838.7638, -1166.5885},
         {-430.26288, 1180.5172, -1295.2363, 242.64317},
     },
     {
         {-7322016000.0, 6215055400.0, 3607590100.0, -356574460.0},
         {496251330.0, 6946025000.0, -9426570000.0, 6636181000.0},
         {1422990200.0, 3077853200.0, -9459560000.0, -12512764000.0},
         {-7802059000.0, -6343663000.0, 1764214900.0, 13877375000.0},
     }},
};
BOOST_DATA_TEST_CASE(matrix_adjoint,
                     boost::unit_test::data::make(kAdjointTestCases),
                     test_case) {
  matrix4_t result;
  MatrixAdjoint(test_case.input, result);

  MATRIX_MATRIX_TEST(result, test_case.expected);
}

BOOST_AUTO_TEST_CASE(matrix_adjoint_inplace) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};

  MatrixAdjoint(mat1);

  MATRIX_TEST(mat1, 0.011548182253112993f, -0.22536766927495697f,
              0.029215612696405956f, 0.30092526525783075f,
              0.030307972205033964f, -0.14825812283280443f,
              0.30164596991086323f, -0.12671193744555986f, -0.0654648185838749f,
              0.10815657095795653f, 0.08374205154482095f, 0.003474381022085934f,
              0.13268413233202908f, 0.17711387076165488f, -0.2995494116732589f,
              -0.0374935777011427f);
}

const std::vector<MatrixTestCaseData> kInvertTestCases = {
    {{
         {1283.0841, -682.55927, -634.0431, -1155.4425},
         {979.01465, 429.3572, -350.29614, -1954.5795},
         {775.1438, -491.9557, 820.10114, -1006.3382},
         {1068.0156, -1031.8821, -1875.7604, -1784.413},
     },
     {
         {0.0018933469, 5.4076703e-05, -0.00063438405, -0.0009274455},
         {0.00044541474, 0.0006893225, -0.0007632907, -0.0006130072},
         {-0.00019558442, -3.800646e-05, 0.0006274495, -0.00018558101},
         {0.0010812397, -0.00032629987, -0.00059787225, -0.00056593935},
     }},
    {{
         {-512.357, 912.6696, 1844.2979, -1686.2858},
         {-515.6658, 550.24524, -458.44604, 1289.8497},
         {-1573.285, 1640.0614, -1705.8497, -580.8421},
         {1655.224, -36.011402, 1562.0474, 1568.5027},
     },
     {
         {-0.0003399382, -0.0010466785, 0.0005557276, 0.0007010603},
         {6.888646e-05, -0.00030466545, 0.00068632304, 0.0005787559},
         {0.0003889591, 0.00045196826, -0.00037007482, -9.05513e-05},
         {-2.7043603e-05, 0.00064744556, -0.0002021442, 1.1956602e-06},
     }},
    {{
         {500.81677, -894.2928, 261.48743, -9.953922},
         {1606.684, 1668.7815, -1627.4628, -945.8971},
         {107.67022, -486.19907, 1105.9161, 66.82791},
         {-156.48012, -542.773, 292.3887, -1026.486},
     },
     {
         {0.000616431, 0.00036765976, 0.00047821717, -0.0003136389},
         {-0.0009155466, 0.00022941583, 0.00059734663, -0.00016363697},
         {-0.00047787075, 7.44992e-05, 0.0011244213, 9.187491e-06},
         {0.00025402274, -0.00015613408, -6.8473455e-05, -0.0008372425},
     }},
    {{
         {-1942.3154, 456.02435, 579.37305, -1929.2478},
         {407.59796, -1171.817, 750.7602, -213.80914},
         {-994.9866, 1631.9716, -280.34097, 762.4897},
         {650.91656, -225.24654, -178.95244, 2003.3444},
     },
     {
         {-0.0011733074, 0.00087727135, 0.00077408005, -0.0013309045},
         {-0.0009452278, 0.000918338, 0.0013530942, -0.0013272556},
         {-0.00077988254, 0.0022957108, 0.0017068256, -0.0011556573},
         {0.00020528375, 2.3283597e-05, 5.309065e-05, 0.00067913457},
     }},
    {{
         {-1130.2775, -456.86508, 1858.7361, 934.66846},
         {-374.6685, 114.77631, -1476.4307, 732.44025},
         {-629.0624, 923.7254, -715.9461, 515.64435},
         {-758.69666, -1367.2465, -551.7604, 1621.9998},
     },
     {
         {-0.0061722742, -0.015223606, 0.009709669, 0.0073444373},
         {-0.0022269003, -0.0059177107, 0.0044685015, 0.0025349113},
         {-0.0011672728, -0.0039474876, 0.0024121616, 0.0016883444},
         {-0.0051613203, -0.013451996, 0.009128961, 0.006763016},
     }},
    {{
         {-125.14807, 1918.6478, -1118.1537, 751.5248},
         {-744.3836, 1176.5382, 149.90396, -1957.7926},
         {1073.0443, 1051.9502, 1673.6299, 67.725555},
         {1166.0623, -472.7416, -207.1192, 192.16975},
     },
     {
         {6.153473e-05, 0.0001078538, 0.00013189841, 0.00081166567},
         {0.00032169482, 0.00012372634, 0.0001956131, -6.6499175e-05},
         {-0.00024776088, -0.00012720362, 0.00038606205, -0.00046306},
         {0.00015095597, -0.00048717324, 9.696405e-05, -0.00038402635},
     }},
    {{
         {532.06134, -1872.2264, -146.35155, 213.07443},
         {1536.3088, 593.07043, 1355.0549, 1581.5955},
         {-1570.8307, 1945.858, 1698.534, 1834.5864},
         {1526.9475, -529.9472, 374.17395, 598.8504},
     },
     {
         {-0.00037923327, -0.00012302819, -0.00011020077, 0.0007974589},
         {-0.0016582974, -0.003181145, 0.0012739011, 0.0050889896},
         {0.006427123, 0.019168751, -0.007669786, -0.029415997},
         {-0.0045163245, -0.014478455, 0.0062005557, 0.022519676},
     }},
    {{
         {1067.6433, 1635.2743, -196.45691, -1212.4418},
         {1908.1415, -791.5641, -355.17636, 550.85364},
         {-1228.123, 1651.4532, -1013.3558, 144.5252},
         {-816.7774, -1178.5773, -262.18988, -1656.6235},
     },
     {
         {0.00021596602, 0.00029165545, -0.0001254573, -7.202511e-05},
         {0.0002565569, -0.0001956626, 8.239628e-05, -0.00024564026},
         {0.00011261092, -0.00065813673, -0.00068457983, -0.00036098136},
         {-0.00030682512, 9.9565594e-05, 0.000111582514, -0.00033623804},
     }},
    {{
         {1495.4357, 2000.3446, -261.51474, -145.2989},
         {543.7934, -561.9414, -337.47214, -892.1451},
         {1225.2382, -21.100178, 280.58264, -410.2417},
         {512.75525, 1284.0107, -266.91406, 74.41372},
     },
     {
         {-0.01910893, 0.00040795447, 0.011346915, 0.030134572},
         {0.016656475, -0.0005186745, -0.009406235, -0.025551677},
         {0.03369264, -0.0016857365, -0.01797572, -0.053522497},
         {-0.034884013, 9.21338e-05, 0.01964079, 0.054708455},
     }},
    {{
         {1476.3071, -1068.7002, 447.40033, -1694.6307},
         {997.0604, -934.48816, -545.1557, -1037.2007},
         {886.718, 645.6091, -634.36896, -399.77167},
         {-532.20154, 967.6502, -655.1702, -2041.8441},
     },
     {
         {0.0002990894, -0.0001809322, 0.00066166784, -0.00028586862},
         {0.00015748199, -0.0007135359, 0.00060780696, 0.00011275202},
         {0.00072755106, -0.000997386, -0.0001325617, -7.123288e-05},
         {-0.00023677525, 2.9040877e-05, 0.00015811902, -0.00033895147},
     }},
    {{{576.7787475586, -137.7601318359, 3827.3881835938, 0.0581101887},
      {-217.0261230469, -602.6860961914, -15947.4501953125, -0.2421257794},
      {241.5435180664, 105.3991622925, 63789.8007812500, 0.9685031176},
      {1652.0338134766, 1239.0253906250, 274167.2187500000, 5.1626057625}},
     {
         {0.0016626591, -0.00041566478, -0.00020367575, 7.259764e-13},
         {-0.00045188778, -0.0016221261, -0.00037841825, -1.973102e-13},
         {4.554818e-06, -1.8978413e-05, 7.5913646e-05, -1.518273e-05},
         {-0.66548765, 1.5301975, -3.8755012, 1.0000002},
     }},
};

BOOST_DATA_TEST_CASE(matrix_invert,
                     boost::unit_test::data::make(kInvertTestCases),
                     test_case) {
  matrix4_t result;
  MatrixInvert(test_case.input, result);

  MATRIX_MATRIX_TEST(result, test_case.expected);
}

BOOST_AUTO_TEST_CASE(create_translation_matrix) {
  vector_t vec1{-0.75f, 0.124f, -0.99f, 1.f};

  matrix4_t result;
  CreateTranslationMatrix(vec1, result);

  MATRIX_TEST(result, 1.f, 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 0.f, 0.f, 0.f, 1.f,
              0.f, -0.75f, 0.123999998f, -0.99000001f, 1.f);
}

BOOST_AUTO_TEST_CASE(test_matrix_translate) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  vector_t vec1{-0.75f, 0.124f, -0.99f, 1.f};

  matrix4_t result;
  MatrixTranslate(mat1, vec1, result);

  MATRIX_TEST(result, -0.278746605f, 0.924600899f, -0.521365523f, 0.978293002f,
              -0.210710391f, 0.197995767f, 0.519286036f, 0.418091893f,
              0.042566698f, 0.464270711f, 0.460597366f, 0.214219734f,
              0.281199694f, 0.0677258968f, 0.364191622f, 0.254775316f);
}

BOOST_AUTO_TEST_CASE(test_matrix_translate_inline) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  vector_t vec1{-0.75f, 0.124f, -0.99f, 1.f};

  MatrixTranslate(mat1, vec1);

  MATRIX_TEST(mat1, -0.278746605f, 0.924600899f, -0.521365523f, 0.978293002f,
              -0.210710391f, 0.197995767f, 0.519286036f, 0.418091893f,
              0.042566698f, 0.464270711f, 0.460597366f, 0.214219734f,
              0.281199694f, 0.0677258968f, 0.364191622f, 0.254775316f);
}

BOOST_AUTO_TEST_CASE(create_scale_matrix) {
  vector_t vec1{-0.75f, 0.124f, -0.99f, 1.f};

  matrix4_t result;
  CreateScaleMatrix(vec1, result);

  MATRIX_TEST(result, -0.75f, 0.f, 0.f, 0.f, 0.f, 0.123999998f, 0.f, 0.f, 0.f,
              0.f, -0.99000001f, 0.f, 0.f, 1.40129846e-45f, 0.f, 1.f);
}

BOOST_AUTO_TEST_CASE(test_matrix_scale) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  vector_t vec1{-0.75f, 0.124f, -0.99f, 1.f};

  matrix4_t result;
  MatrixScale(mat1, vec1, result);

  MATRIX_TEST(result, -0.341229856f, 0.0996082798f, -0.442673117f, 0.978293002f,
              -0.0771438926f, 0.0181228947f, -0.92386508f, 0.418091893f,
              -0.15242362f, 0.054275725f, -0.665948153f, 0.214219734f,
              -0.354210883f, 0.00448058592f, -0.610255003f, 0.254775316f);
}

BOOST_AUTO_TEST_CASE(test_matrix_scale_inline) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  vector_t vec1{-0.75f, 0.124f, -0.99f, 1.f};

  MatrixScale(mat1, vec1);

  MATRIX_TEST(mat1, -0.341229856f, 0.0996082798f, -0.442673117f, 0.978293002f,
              -0.0771438926f, 0.0181228947f, -0.92386508f, 0.418091893f,
              -0.15242362f, 0.054275725f, -0.665948153f, 0.214219734f,
              -0.354210883f, 0.00448058592f, -0.610255003f, 0.254775316f);
}

BOOST_AUTO_TEST_CASE(test_matrix_rotate) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  vector_t vec1{M_PI * 0.5f, M_PI * 0.25f, M_PI, 0.0};

  matrix4_t result;
  MatrixRotate(mat1, vec1, result);

  MATRIX_TEST(result, -0.00553559931f, -0.637893438f, -0.803292632f,
              0.978293002f, 0.587137997f, -0.732601881f, -0.146152422f,
              0.418091893f, 0.331946641f, -0.619359314f, -0.437707514f,
              0.214219734f, 0.101920955f, -0.769827425f, -0.0361338332f,
              0.254775316f);
}

BOOST_AUTO_TEST_CASE(test_matrix_rotate_inline) {
  matrix4_t mat1{0.45497313f, 0.80329256f, 0.44714458f, 0.97829298f,
                 0.10285853f, 0.14615238f, 0.933197f,   0.4180919f,
                 0.2032315f,  0.43770744f, 0.67267487f, 0.21421973f,
                 0.47228118f, 0.03613376f, 0.61641922f, 0.25477532f};
  vector_t vec1{M_PI * 0.5f, M_PI * 0.25f, M_PI, 0.0};

  MatrixRotate(mat1, vec1);

  MATRIX_TEST(mat1, -0.00553559931f, -0.637893438f, -0.803292632f, 0.978293002f,
              0.587137997f, -0.732601881f, -0.146152422f, 0.418091893f,
              0.331946641f, -0.619359314f, -0.437707514f, 0.214219734f,
              0.101920955f, -0.769827425f, -0.0361338332f, 0.254775316f);
}

BOOST_AUTO_TEST_SUITE_END()
